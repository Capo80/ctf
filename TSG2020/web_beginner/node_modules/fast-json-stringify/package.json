{
  "_args": [
    [
      "fast-json-stringify@^1.18.0",
      "/home/capo80/Desktop/ctf/TSG2020/web_beginner/node_modules/fastify"
    ]
  ],
  "_from": "fast-json-stringify@>=1.18.0 <2.0.0",
  "_hasShrinkwrap": false,
  "_id": "fast-json-stringify@1.21.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/fast-json-stringify",
  "_nodeVersion": "12.18.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/fast-json-stringify_1.21.0_1593523426832_0.07510068995439623"
  },
  "_npmUser": {
    "email": "hello@matteocollina.com",
    "name": "matteo.collina"
  },
  "_npmVersion": "6.14.5",
  "_phantomChildren": {},
  "_requested": {
    "name": "fast-json-stringify",
    "raw": "fast-json-stringify@^1.18.0",
    "rawSpec": "^1.18.0",
    "scope": null,
    "spec": ">=1.18.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/fastify"
  ],
  "_resolved": "https://registry.npmjs.org/fast-json-stringify/-/fast-json-stringify-1.21.0.tgz",
  "_shasum": "51bc8c6d77d8c7b2cc7e5fa754f7f909f9e1262f",
  "_shrinkwrap": null,
  "_spec": "fast-json-stringify@^1.18.0",
  "_where": "/home/capo80/Desktop/ctf/TSG2020/web_beginner/node_modules/fastify",
  "author": {
    "email": "hello@matteocollina.com",
    "name": "Matteo Collina"
  },
  "bugs": {
    "url": "https://github.com/fastify/fast-json-stringify/issues"
  },
  "dependencies": {
    "ajv": "^6.11.0",
    "deepmerge": "^4.2.2",
    "string-similarity": "^4.0.1"
  },
  "description": "Stringify your JSON at max speed",
  "devDependencies": {
    "ajv-pack": "^0.3.1",
    "benchmark": "^2.1.4",
    "compile-json-stringify": "^0.1.2",
    "is-my-json-valid": "^2.20.0",
    "json-strify": "^0.1.7",
    "long": "^4.0.0",
    "moment": "^2.24.0",
    "pre-commit": "^1.2.2",
    "proxyquire": "^2.1.3",
    "semver": "^7.1.0",
    "standard": "^14.0.0",
    "tap": "^12.6.5",
    "typescript": "^3.7.5",
    "uglify-es": "^3.3.9"
  },
  "directories": {},
  "dist": {
    "fileCount": 57,
    "integrity": "sha512-xY6gyjmHN3AK1Y15BCbMpeO9+dea5ePVsp3BouHCdukcx0hOHbXwFhRodhcI0NpZIgDChSeAKkHW9YjKvhwKBA==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe+zzjCRA9TVsSAnZWagAAalcP/RSpKF6WBut32ZKauHvY\nuiJ3lP90C0RUVqt/+pFruh3XCnpJA5jNQpxnWil7blWLkeSoVfEuHwXmWvvV\nuIVv0Zp4xFpBpLf5RQoWZABhkWTfU6N1b5GejmZ64tGBgo7j4r7lR2RbCdFD\noSzoSEKH8NXdjh2iGJzBcdOqLRhO25tGoHqdisMexAoYpeUU9pkIf5bONl16\n37vFL4xRtLrikX3rS8WJ6P9Msojb3NWL20A+5ucZSLpmaH8bddYV/Is8k8iU\ntQROMGxUQhitsRKJ50vgrlqPmobvttkHdnK1Q2qzdT/uuS3E5rTbG7TGtAF/\nHmkWygBTCuAzBRJ/T+s7+BQJfALfQWIJm4XBcGJZVEI9tzXg6nbFW9WOsthY\nhijsYwYa3D0MMrwkh47ax/VKbUIGodO5nP+OVtvjNJNzQhqqVWOIyio5uTId\nI4yal3XFj/FPHBNAGrJGkofNz18n3hM//U6b0X77Xlie71L7+go6VAr9GXmZ\n8AmvbMb0Xil9Ee6Bmc0B2PeQ+gXCCCZxhOLTJ7//8qwi1hZhlexDUfYP054W\nEI62S8IwFO35xesq47qcZ9xdLo8QdhEeX8kvWy3b1DWKw0z4nW09jC9g92wg\nQVyDpRAvW50NzkwljQOtw7Sa4Au7bbsQ3C7v+zZsA4PLDlZ1jrul2wkaY11D\ne867\r\n=hytq\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "51bc8c6d77d8c7b2cc7e5fa754f7f909f9e1262f",
    "tarball": "https://registry.npmjs.org/fast-json-stringify/-/fast-json-stringify-1.21.0.tgz",
    "unpackedSize": 306653
  },
  "gitHead": "a89bbe4ece1bd0174b7b0a3e760996d89fbb3e75",
  "homepage": "https://github.com/fastify/fast-json-stringify#readme",
  "keywords": [
    "fast",
    "json",
    "schema",
    "stringify"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "delvedor",
      "email": "tommydelved@gmail.com"
    },
    {
      "name": "matteo.collina",
      "email": "hello@matteocollina.com"
    }
  ],
  "name": "fast-json-stringify",
  "optionalDependencies": {},
  "precommit": "test",
  "readme": "# fast-json-stringify\n\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](http://standardjs.com/)\n![Ci Workflow](https://github.com/fastify/fast-json-stringify/workflows/CI%20workflow/badge.svg)\n[![NPM downloads](https://img.shields.io/npm/dm/fast-json-stringify.svg?style=flat)](https://www.npmjs.com/package/fast-json-stringify)\n\n\n__fast-json-stringify__ is significantly faster than `JSON.stringify()` for small payloads. Its performance advantage shrinks as your payload grows. It pairs well with [__flatstr__](https://www.npmjs.com/package/flatstr), which triggers a V8 optimization that improves performance when eventually converting the string to a `Buffer`.\n\n##### Benchmarks\n- Machine: `EX41S-SSD, Intel Core i7, 4Ghz, 64GB RAM, 4C/8T, SSD`.\n- Node.js `v10.15.2`\n\n```\nFJS creation x 8,951 ops/sec ±0.51% (92 runs sampled)\n\nJSON.stringify array x 5,146 ops/sec ±0.32% (97 runs sampled)\nfast-json-stringify array x 8,402 ops/sec ±0.62% (95 runs sampled)\nfast-json-stringify-uglified array x 8,474 ops/sec ±0.49% (93 runs sampled)\n\nJSON.stringify long string x 13,061 ops/sec ±0.25% (98 runs sampled)\nfast-json-stringify long string x 13,059 ops/sec ±0.21% (98 runs sampled)\nfast-json-stringify-uglified long string x 13,099 ops/sec ±0.14% (98 runs sampled)\n\nJSON.stringify short string x 6,295,988 ops/sec ±0.28% (98 runs sampled)\nfast-json-stringify short string x 43,335,575 ops/sec ±1.24% (86 runs sampled)\nfast-json-stringify-uglified short string x 40,042,871 ops/sec ±1.38% (93 runs sampled)\n\nJSON.stringify obj x 2,557,026 ops/sec ±0.20% (97 runs sampled)\nfast-json-stringify obj x 9,001,890 ops/sec ±0.48% (90 runs sampled)\nfast-json-stringify-uglified obj x 9,073,607 ops/sec ±0.41% (94 runs sampled)\n```\n\n#### Table of contents:\n- <a href=\"#example\">`Example`</a>\n- <a href=\"#api\">`API`</a>\n - <a href=\"#fastJsonStringify\">`fastJsonStringify`</a>\n - <a href=\"#specific\">`Specific use cases`</a>\n - <a href=\"#required\">`Required`</a>\n - <a href=\"#missingFields\">`Missing fields`</a>\n - <a href=\"#patternProperties\">`Pattern Properties`</a>\n - <a href=\"#additionalProperties\">`Additional Properties`</a>\n - <a href=\"#anyof\">`AnyOf`</a>\n - <a href=\"#ref\">`Reuse - $ref`</a>\n - <a href=\"#long\">`Long integers`</a>\n - <a href=\"#uglify\">`Uglify`</a>\n - <a href=\"#nullable\">`Nullable`</a>\n- <a href=\"#caveat\">`Caveat`</a>\n- <a href=\"#acknowledgements\">`Acknowledgements`</a>\n- <a href=\"#license\">`License`</a>\n\n\n<a name=\"example\"></a>\n## Example\n\n```js\nconst fastJson = require('fast-json-stringify')\nconst stringify = fastJson({\n  title: 'Example Schema',\n  type: 'object',\n  properties: {\n    firstName: {\n      type: 'string'\n    },\n    lastName: {\n      type: 'string'\n    },\n    age: {\n      description: 'Age in years',\n      type: 'integer'\n    },\n    reg: {\n      type: 'string'\n    }\n  }\n})\n\nconsole.log(stringify({\n  firstName: 'Matteo',\n  lastName: 'Collina',\n  age: 32,\n  reg: /\"([^\"]|\\\\\")*\"/\n}))\n```\n<a name=\"api\"></a>\n## API\n<a name=\"fastJsonStringify\"></a>\n### fastJsonStringify(schema)\n\nBuild a `stringify()` function based on\n[jsonschema](http://json-schema.org/).\n\nSupported types:\n\n * `'string'`\n * `'integer'`\n * `'number'`\n * `'array'`\n * `'object'`\n * `'boolean'`\n * `'null'`\n\nAnd nested ones, too.\n\n<a name=\"specific\"></a>\n#### Specific use cases\n\n| Instance | Serialized as                |\n| -------- | ---------------------------- |\n| `Date`   | `string` via `toISOString()` |\n| `RegExp` | `string`                     |\n| `BigInt` | `integer` via `toString`     |\n\n[JSON Schema built-in formats](https://json-schema.org/understanding-json-schema/reference/string.html#built-in-formats) for dates are supported and will be serialized as:\n\n| Format      | Serialized format example  |\n| ----------- | -------------------------- |\n| `date-time` | `2020-04-03T09:11:08.615Z` |\n| `date`      | `2020-04-03`               |\n| `time`      | `09:11:08`                 |\n\nExample with a MomentJS object:\n\n```javascript\nconst moment = require('moment')\n\nconst stringify = fastJson({\n  title: 'Example Schema with string date-time field',\n  type: 'string',\n  format: 'date-time'\n}\n\nconsole.log(stringify(moment())) // '\"YYYY-MM-DDTHH:mm:ss.sssZ\"'\n```\n\n\n<a name=\"required\"></a>\n#### Required\nYou can set specific fields of an object as required in your schema by adding the field name inside the `required` array in your schema.\nExample:\n```javascript\nconst schema = {\n  title: 'Example Schema with required field',\n  type: 'object',\n  properties: {\n    nickname: {\n      type: 'string'\n    },\n    mail: {\n      type: 'string'\n    }\n  },\n  required: ['mail']\n}\n```\nIf the object to stringify is missing the required field(s), `fast-json-stringify` will throw an error.\n\n<a name=\"missingFields\"></a>\n#### Missing fields\nIf a field *is present* in the schema (and is not required) but it *is not present* in the object to stringify, `fast-json-stringify` will not write it in the final string.\nExample:\n```javascript\nconst stringify = fastJson({\n  title: 'Example Schema',\n  type: 'object',\n  properties: {\n    nickname: {\n      type: 'string'\n    },\n    mail: {\n      type: 'string'\n    }\n  }\n})\n\nconst obj = {\n  mail: 'mail@example.com'\n}\n\nconsole.log(stringify(obj)) // '{\"mail\":\"mail@example.com\"}'\n```\n\n<a name=\"defaults\"></a>\n#### Defaults\n`fast-json-stringify` supports `default` jsonschema key in order to serialize a value\nif it is `undefined` or not present.\n\nExample:\n```javascript\nconst stringify = fastJson({\n  title: 'Example Schema',\n  type: 'object',\n  properties: {\n    nickname: {\n      type: 'string',\n      default: 'the default string'\n    }\n  }\n})\n\nconsole.log(stringify({})) // '{\"nickname\":\"the default string\"}'\nconsole.log(stringify({nickname: 'my-nickname'})) // '{\"nickname\":\"my-nickname\"}'\n```\n\n<a name=\"patternProperties\"></a>\n#### Pattern properties\n`fast-json-stringify` supports pattern properties as defined by JSON schema.\n*patternProperties* must be an object, where the key is a valid regex and the value is an object, declared in this way: `{ type: 'type' }`.\n*patternProperties* will work only for the properties that are not explicitly listed in the properties object.\nExample:\n```javascript\nconst stringify = fastJson({\n  title: 'Example Schema',\n  type: 'object',\n  properties: {\n    nickname: {\n      type: 'string'\n    }\n  },\n  patternProperties: {\n    'num': {\n      type: 'number'\n    },\n    '.*foo$': {\n      type: 'string'\n    }\n  }\n})\n\nconst obj = {\n  nickname: 'nick',\n  matchfoo: 42,\n  otherfoo: 'str'\n  matchnum: 3\n}\n\nconsole.log(stringify(obj)) // '{\"matchfoo\":\"42\",\"otherfoo\":\"str\",\"matchnum\":3,\"nickname\":\"nick\"}'\n```\n\n<a name=\"additionalProperties\"></a>\n#### Additional properties\n`fast-json-stringify` supports additional properties as defined by JSON schema.\n*additionalProperties* must be an object or a boolean, declared in this way: `{ type: 'type' }`.\n*additionalProperties* will work only for the properties that are not explicitly listed in the *properties* and *patternProperties* objects.\n\nIf *additionalProperties* is not present or is set to `false`, every property that is not explicitly listed in the *properties* and *patternProperties* objects,will be ignored, as described in <a href=\"#missingFields\">Missing fields</a>.\nMissing fields are ignored to avoid having to rewrite objects before serializing. However, other schema rules would throw in similar situations.\nIf *additionalProperties* is set to `true`, it will be used by `JSON.stringify` to stringify the additional properties. If you want to achieve maximum performance, we strongly encourage you to use a fixed schema where possible.\nThe additional properties will always be serialzied at the end of the object.\nExample:\n```javascript\nconst stringify = fastJson({\n  title: 'Example Schema',\n  type: 'object',\n  properties: {\n    nickname: {\n      type: 'string'\n    }\n  },\n  patternProperties: {\n    'num': {\n      type: 'number'\n    },\n    '.*foo$': {\n      type: 'string'\n    }\n  },\n  additionalProperties: {\n    type: 'string'\n  }\n})\n\nconst obj = {\n  nickname: 'nick',\n  matchfoo: 42,\n  otherfoo: 'str'\n  matchnum: 3,\n  nomatchstr: 'valar morghulis',\n  nomatchint: 313\n}\n\nconsole.log(stringify(obj)) // '{\"nickname\":\"nick\",\"matchfoo\":\"42\",\"otherfoo\":\"str\",\"matchnum\":3,\"nomatchstr\":\"valar morghulis\",nomatchint:\"313\"}'\n```\n\n#### AnyOf\n\n`fast-json-stringify` supports the anyOf keyword as defined by JSON schema. *anyOf* must be an array of valid JSON schemas. The different schemas will be tested in the specified order. The more schemas `stringify` has to try before finding a match, the slower it will be.\n\n*anyOf* uses [ajv](https://www.npmjs.com/package/ajv) as a JSON schema validator to find the schema that matches the data. This has an impact on performance—only use it as a last resort.\n\nExample:\n```javascript\nconst stringify = fastJson({\n  title: 'Example Schema',\n  type: 'object',\n  properties: {\n    'undecidedType': {\n      'anyOf': [{\n\ttype: 'string'\n      }, {\n\ttype: 'boolean'\n      }]\n    }\n  }\n}\n```\n\n<a name=\"if-then-else\"></a>\n#### If/then/else\n`fast-json-stringify` supports `if/then/else` jsonschema feature. See [ajv documentation](https://ajv.js.org/keywords.html#ifthenelse).\n\nExample:\n```javascript\nconst stringify = fastJson({\n  'type': 'object',\n  'properties': {\n  },\n  'if': {\n    'properties': {\n      'kind': { 'type': 'string', 'enum': ['foobar'] }\n    }\n  },\n  'then': {\n    'properties': {\n      'kind': { 'type': 'string', 'enum': ['foobar'] },\n      'foo': { 'type': 'string' },\n      'bar': { 'type': 'number' }\n    }\n  },\n  'else': {\n    'properties': {\n      'kind': { 'type': 'string', 'enum': ['greeting'] },\n      'hi': { 'type': 'string' },\n      'hello': { 'type': 'number' }\n    }\n  }\n})\n\nconsole.log(stringify({\n  kind: 'greeting',\n  foo: 'FOO',\n  bar: 42,\n  hi: 'HI',\n  hello: 45\n})) // {\"kind\":\"greeting\",\"hi\":\"HI\",\"hello\":45}\nconsole.log(stringify({\n  kind: 'foobar',\n  foo: 'FOO',\n  bar: 42,\n  hi: 'HI',\n  hello: 45\n})) // {\"kind\":\"foobar\",\"foo\":\"FOO\",\"bar\":42}\n```\n\n**NB:** don't declare the properties twice or you'll print them twice!\n\n<a name=\"ref\"></a>\n#### Reuse - $ref\nIf you want to reuse a definition of a value, you can use the property `$ref`.\nThe value of `$ref` must be a string in [JSON Pointer](https://tools.ietf.org/html/rfc6901) format.\nExample:\n```javascript\nconst schema = {\n  title: 'Example Schema',\n  definitions: {\n    num: {\n      type: 'object',\n      properties: {\n        int: {\n          type: 'integer'\n        }\n      }\n    },\n    str: {\n      type: 'string'\n    }\n  },\n  type: 'object',\n  properties: {\n    nickname: {\n      $ref: '#/definitions/str'\n    }\n  },\n  patternProperties: {\n    'num': {\n      $ref: '#/definitions/num'\n    }\n  },\n  additionalProperties: {\n    $ref: '#/definitions/def'\n  }\n}\n\nconst stringify = fastJson(schema)\n```\nIf you need to use an external definition, you can pass it as an option to `fast-json-stringify`.\nExample:\n```javascript\nconst schema = {\n  title: 'Example Schema',\n  type: 'object',\n  properties: {\n    nickname: {\n      $ref: 'strings#/definitions/str'\n    }\n  },\n  patternProperties: {\n    'num': {\n      $ref: 'numbers#/definitions/num'\n    }\n  },\n  additionalProperties: {\n    $ref: 'strings#/definitions/def'\n  }\n}\n\nconst externalSchema = {\n  numbers: {\n    definitions: {\n      num: {\n        type: 'object',\n        properties: {\n          int: {\n            type: 'integer'\n          }\n        }\n      }\n    }\n  },\n  strings: require('./string-def.json')\n}\n\nconst stringify = fastJson(schema, { schema: externalSchema })\n```\nExternal definitions can also reference each other.\nExample:\n```javascript\nconst schema = {\n  title: 'Example Schema',\n  type: 'object',\n  properties: {\n    foo: {\n      $ref: 'strings#/definitions/foo'\n    }\n  }\n}\n\nconst externalSchema = {\n  strings: {\n    definitions: {\n      foo: {\n        $ref: 'things#/definitions/foo'\n      }\n    }\n  },\n  things: {\n    definitions: {\n      foo: {\n        type: 'string'\n      }\n    }\n  }\n}\n\nconst stringify = fastJson(schema, { schema: externalSchema })\n```\n\n<a name=\"long\"></a>\n#### Long integers\nBy default the library will handle automatically [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) from Node.js v10.3 and above.\nIf you can't use BigInts in your environment, long integers (64-bit) are also supported using the [long](https://github.com/dcodeIO/long.js) module.\nExample:\n```javascript\n// => using native BigInt\nconst stringify = fastJson({\n  title: 'Example Schema',\n  type: 'object',\n  properties: {\n    id: {\n      type: 'integer'\n    }\n  }\n})\n\nconst obj = {\n  id: 18446744073709551615n\n}\n\nconsole.log(stringify(obj)) // '{\"id\":18446744073709551615}'\n\n// => using the long library\nconst Long = require('long')\n\nconst stringify = fastJson({\n  title: 'Example Schema',\n  type: 'object',\n  properties: {\n    id: {\n      type: 'integer'\n    }\n  }\n})\n\nconst obj = {\n  id: Long.fromString('18446744073709551615', true)\n}\n\nconsole.log(stringify(obj)) // '{\"id\":18446744073709551615}'\n```\n\n<a name=\"uglify\"></a>\n#### Uglify\nIf you want to squeeze a little bit more performance out of the serialization at the cost of readability in the generated code, you can pass `uglify: true` as an option.\nNote that you have to manually install `uglify-es` in order for this to work. Only version 3 is supported.\nExample:\n\nNote that if you are using Node 8.3.0 or newer, there are no performance gains from using Uglify. See https://www.nearform.com/blog/node-js-is-getting-a-new-v8-with-turbofan/\n\n```javascript\n\nconst stringify = fastJson({\n  title: 'Example Schema',\n  type: 'object',\n  properties: {\n    id: {\n      type: 'integer'\n    }\n  }\n}, { uglify: true })\n\n// stringify is now minified code\nconsole.log(stringify({ some: 'object' })) // '{\"some\":\"object\"}'\n```\n\n<a name=\"nullable\"></a>\n#### Nullable\n\nAccording to the [Open API 3.0 specification](https://swagger.io/docs/specification/data-models/data-types/#null), a value that can be null must be declared `nullable`.\n\n##### Nullable object\n```javascript\nconst stringify = fastJson({\n  'title': 'Nullable schema',\n  'type': 'object',\n  'nullable': true,\n  'properties': {\n    'product': {\n      'nullable': true,\n      'type': 'object',\n      'properties': {\n        'name': {\n          'type': 'string'\n        }\n      }\n    }\n  }\n})\n\nconsole.log(stringify({product: {name: \"hello\"}})) // \"{\"product\":{\"name\":\"hello\"}}\"\nconsole.log(stringify({product: null})) // \"{\"product\":null}\"\nconsole.log(stringify(null)) // null\n```\n\nOtherwise, instead of raising an error, null values will be coerced as follows:\n\n- `integer` -> `0`\n- `number` -> `0`\n- `string` -> `\"\"`\n- `boolean` -> `false`\n\n<a name=\"caveat\"></a>\n## Caveat\n\nIn order to achieve lowest cost/highest performance redaction `fast-json-stringify`\ncreates and compiles a function (using the `Function` constructor) on initialization.\nWhile the `schema` is currently validated for any developer errors, it's recommended against\nallowing user input to directly supply a schema.\nIt can't be guaranteed that allowing user input for the schema couldn't feasibly expose an attack\nvector.\n\n<a name=\"debug\"></a>\n### Debug Mode\n\nThe debug mode can be activated during your development to understand what is going on when things do not\nwork as you expect.\n\n```js\nconst debugCompiled = fastJson({\n  title: 'default string',\n  type: 'object',\n  properties: {\n    firstName: {\n      type: 'string'\n    }\n  }\n}, { debugMode: true })\n\nconsole.log(debugCompiled) // it is an array of functions that can create your `stringify` function\nconsole.log(debugCompiled.toString()) // print a \"ready to read\" string function, you can save it to a file\n\nconst rawString = debugCompiled.toString()\nconst stringify = fastJson.restore(rawString) // use the generated string to get back the `stringify` function\nconsole.log(stringify({ firstName: 'Foo', surname: 'bar' })) // '{\"firstName\":\"Foo\"}'\n```\n\n<a name=\"acknowledgements\"></a>\n## Acknowledgements\n\nThis project was kindly sponsored by [nearForm](http://nearform.com).\n\n<a name=\"license\"></a>\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fastify/fast-json-stringify.git"
  },
  "scripts": {
    "benchmark": "node bench.js",
    "start": "node server.js",
    "test": "npm run test:lint && npm run test:unit && npm run test:typescript",
    "test:lint": "standard",
    "test:typescript": "tsc --project ./test/types/tsconfig.json",
    "test:unit": "tap -J test/*.test.js test/**/*.test.js"
  },
  "standard": {
    "ignore": [
      "schema-validator.js"
    ]
  },
  "types": "index.d.ts",
  "version": "1.21.0"
}
